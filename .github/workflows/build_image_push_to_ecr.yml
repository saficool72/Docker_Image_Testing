name: Docker Image CI
on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  QG: myCodeQualityGate
  
jobs:
  Scannjob_for_secrets_dependency_check:
    name: Job to scan the Secrets & dependency-check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Secret Scanning
      uses: trufflesecurity/trufflehog@main
      with:
        extra_args: --only-verified
      env:    
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Dependency Check
      uses: dependency-check/Dependency-Check_Action@1.1.0
      with:
        project: my-proj
        path: .
        format: HTML
        out: 'reports'

    - name: Upload Dependency-Check Report as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: dependencyc reports
        path: ${{github.workspace}}/reports

  Sonar_scan_job:
    name: Job for SonarQube Scan
    runs-on: ubuntu-latest
    needs: Scannjob_for_secrets_dependency_check
    
    steps:
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v4.1.0
      with:
        args: |
          -Dsonar.projectKey=my-prj
          #-Dsonar.organization=my-org
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      #Check the Quality Gate Status
    - name: SonarQube Quality Gate Check
      id: sonarqube-quality-gate-check
      uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
      timeout-minutes: 5      #Force to fail step after specific time.
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    - name: SonarQube Quality Gate Status
      run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
      
   #   #jq: The above script uses jq, a lightweight and flexible command-line JSON processor. It is installed by default on most Ubuntu-based GitHub runners. If it's not available, you may need to install it.
   # - name: Install jq
   #   run: sudo apt-get install jq

    #- name: Wait for Quality Gate to pass
    #  run: |
    #    echo "Waiting for SonarQube Quality Gate..."
    #    for i in {1..5}; do
    #      QUALITY_GATE_STATUS=$(curl -s -u ${{ secrets.SONAR_TOKEN }} "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=my-prj" | jq -r '.projectStatus.status')
    #      if [[ "$QUALITY_GATE_STATUS" == "OK" ]]; then
    #        echo "Quality Gate passed!"
    #        break
    #      else
    #        echo "Quality Gate not passed yet. Retrying..."
    #        sleep 10
    #      fi
    #    done

    #    if [[ "$QUALITY_GATE_STATUS" != "OK" ]]; then
    #      echo "Quality Gate failed!"
    #      exit 1
    #    fi

     
    #- name: Wait for Quality Gate to pass
    #  run: |
    #    echo "Waiting for SonarQube Quality Gate..."
    #    # Query SonarQube to get the Quality Gate status for the project
    #    QUALITY_GATE_STATUS=$(curl -s -u ${{ secrets.SONAR_TOKEN }} "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=my-prj" | jq -r '.projectStatus.status')
    #    
    #    # Check if the Quality Gate status is 'OK', otherwise fail the build
    #    if [[ "$QUALITY_GATE_STATUS" != "OK" ]]; then
    #      echo "Quality Gate failed!"
    #      exit 1
    #    else
    #      echo "Quality Gate passed!"
    #    fi
        
    #- name: Check Quality Gate
    #  run: |
    #    curl -u ${{ secrets.SONAR_TOKEN }} "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=my_project_key"
  
    # Optional: Set up Docker Buildx (only if building multi-platform images)
  
  Docker_build_job:
    name: Job to Build Docker Image
    runs-on: ubuntu-latest
    needs: Sonar_scan_job
    steps:

    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx (optional)
      uses: docker/setup-buildx-action@v3.7.1

    - name: Build docker image
      run: |
        docker build -t hk_image:v1 .

    - name: Filter docker image
      run: |
        docker images --filter reference=hk_image

    - name: "Configure AWS Credentials"
      id: Configure-AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ env.AWS_REGION }}
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Authenticate to AWS ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Tag the Image
      run: |
        docker tag hk_image:v1 ${{ secrets.ECR_REPOSITORY }}:latest
        docker tag hk_image:v1 ${{ secrets.ECR_REPOSITORY }}:v1.0.0

    - name: Push the Image to Aws ECR
      run: |
        docker push ${{ secrets.ECR_REPOSITORY }}:latest
        docker push ${{ secrets.ECR_REPOSITORY }}:v1.0.0

    - name: Image cleanup
      if: always()
      run: |
        docker rmi ${{ secrets.ECR_REPOSITORY }}:latest ${{ secrets.ECR_REPOSITORY }}:v1.0.0 || true

    # Save the built image as an artifact to be used by the next job
    #- name: Upload Docker Image as Artifact
    #  uses: actions/upload-artifact@v4.4.3
    #  with:
    #    name: docker-image
    #    path: ./hk_image:v1

  trivy_scan:
    name: Run Trivy Scan
    runs-on: ubuntu-latest
    needs: Docker_build_job  # This job will run after the "docker_build" job is completed

    steps:
    - name: "Configure AWS Credentials"
      id: Configure-AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ env.AWS_REGION }}
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        
    - name: Authenticate to AWS ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Aqua Security Trivy Scan
      uses: aquasecurity/trivy-action@0.29.0
      with:
        image-ref: ${{ secrets.ECR_REPOSITORY }}:latest
        scan-type: image
        severity: 'HIGH,CRITICAL'
        format: 'table'
        #format: 'github'
        #format: 'sarif'
        #output: 'dependency-results.sbom.json'
        #output: 'trivy-vuln-results.sarif'
        output: 'trivy-vuln-results.txt'
        github-pat: ${{ secrets.GITHUB_TOKEN }}
        vuln-type: 'os,library'

    - name: Upload trivy report as a Github artifact
      uses: actions/upload-artifact@v4
      with:
        name: trivy-sbom-report
        path: '${{ github.workspace }}/trivy-vuln-results.txt'
        retention-days: 20

    #- name: Check if SARIF file exists
    #  run: |
    #    if [ -f "trivy-vuln-results.sarif" ]; then
    #      echo "SARIF file exists"
    #    else
    #      echo "SARIF file does not exist"
    #      exit 1
    #    fi
  
    #- name: Check if SARIF file exists
    #  run: |
    #    ls -l trivy-vuln-results.sarif
        
     #Upload Trivy Scan Results to GitHub Security Tab
    #- name: Upload Trivy Scan Results to GitHub Security Tab
    #  uses: github/codeql-action/upload-sarif@v3
    #  with:
    #    sarif_file: 'trivy-vuln-results.sarif'
        
    # Upload Trivy scan results as an artifact
    #- name: Upload Trivy Scan Results
    #  uses: actions/upload-artifact@v4.4.3
    #  with:
    #    name: trivy-vuln-results
    #    path: ${{ github.workspace }}/trivy-vuln-results.json
     #   retention-days: 10

    - name: Image cleanup
      if: always()
      run: |
        docker rmi ${{ secrets.ECR_REPOSITORY }}:latest ${{ secrets.ECR_REPOSITORY }}:v1.0.0 || true
